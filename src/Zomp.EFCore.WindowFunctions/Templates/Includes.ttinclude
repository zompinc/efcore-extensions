﻿<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#+
public enum ExpressionType
{
    NonNullableStruct,
    NullableStruct,
    ByteArray,
    String,
    Generic
}

public enum VariationType
{
    All,
    StructsOnly,
    Generic
}

public enum FunctionType
{
    NoArguments,
    SingleArgument,
    LeadLag
}

public record Argument(string Type, string Name, string Description)
{
    public string ToParameterDeclaration() => $"{Type} {Name}";
    public string ToTrivia() => $"    /// <param name=\"{Name.Trim(new char[] { '@' })}\">{Description}</param>";
}

public record Configuration(FunctionType FunctionType, ExpressionType ExpressionType, bool CustomReturnType, string SpecificReturnType, bool RespectIgnoreNullsOption)
{
    string TypeDefinition { get; } = ExpressionType switch
    {
        ExpressionType.NonNullableStruct => "T",
        ExpressionType.NullableStruct or ExpressionType.Generic => "T?",
        ExpressionType.ByteArray => "byte[]",
        _ => "string",
    };
    private static readonly Argument Offset = new("long", "offset", "The offset.");
    private static readonly Argument Default = new("T?", "@default", "The default.");
    private static readonly Argument RespectOrIgnoreNulls = new("RespectOrIgnoreNulls?", "respectOrIgnoreNulls", "Respect nulls or ignore nulls.");
    public bool IsGeneric => ExpressionType is ExpressionType.NonNullableStruct or ExpressionType.NullableStruct or ExpressionType.Generic;
    public bool IsGenericWithQualifier => ExpressionType is ExpressionType.NonNullableStruct or ExpressionType.NullableStruct;
    public string ReturnType => CustomReturnType ? "TResult" : !string.IsNullOrEmpty(SpecificReturnType) ? SpecificReturnType : IsGeneric ? "T" : TypeDefinition;
    public string ArgumentType => IsGeneric ? TypeDefinition : TypeDefinition + "?";
    public string GenericTypeParameters => FunctionType != FunctionType.NoArguments && IsGeneric ? CustomReturnType ? "<T, TResult>" : "<T>" : string.Empty;
    private Argument GetDefaultExpression() => new(ArgumentType, "expression", "Expression to run window function on.");
    private List<Argument> GetLeadLagArguments()
    {
        var list = new List<Argument>() { GetDefaultExpression(), Offset, Default };
        if (RespectIgnoreNullsOption)
        {
            list.Add(RespectOrIgnoreNulls);
        }
        return list;
    }
    private List<Argument> ArgList => FunctionType switch
    {
        FunctionType.SingleArgument => new List<Argument>() { GetDefaultExpression() },
        FunctionType.LeadLag => GetLeadLagArguments(),
        _ => new List<Argument> { },
    };

    public string Arguments => string.Join(string.Empty, ArgList.Select(a => a.ToParameterDeclaration() + ", "));
    public string ParameterTrivia => string.Join("\r\n", ArgList.Select(a => a.ToTrivia()));
}
#>

name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  Configuration: Release
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build:

    runs-on: windows-latest

    steps:
    - name: Start PostgreSQL on Windows
      run: |
        $pgService = Get-Service -Name postgresql*
        Set-Service -InputObject $pgService -Status running -StartupType automatic
        Start-Process -FilePath "$env:PGBIN\pg_isready" -Wait -PassThru

    - name: Set up PostgreSQL test user
      env:
        PGUSER: postgres
        PGPASSWORD: root
      run: |
        & $env:PGBIN\psql -c "CREATE USER npgsql_tests SUPERUSER PASSWORD 'npgsql_tests'"

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

    - uses: dotnet/nbgv@master
      id: nbgv
      with:
        setAllVars: true

    - run: nbgv cloud

    - run: yarn install

    - run: dotnet tool restore

    - name: 'Run pre-commit hooks'
      shell: bash
      run: sh $(git config core.hooksPath)/pre-commit normal

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: | 
          6.0.x
          7.0.x
        include-prerelease: true
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
    - name: Pack
      run: dotnet pack --configuration Release -o packages --no-build
    - name: Upload artifacts (.nupkg)
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: packages/

  publish:
    needs: build
    runs-on: windows-latest

    steps:
    - name: Download Package artifact
      uses: actions/download-artifact@v3
      with:
        name: packages
        path: packages

    - run: dotnet tool install nugetkeyvaultsigntool --tool-path . --version 3.2.2

    - name: Sign Nuget Files
      run: .\NuGetKeyVaultSignTool sign packages\*.nupkg -kvt ${{ secrets.AZURE_TENANT_ID }} -kvu ${{ secrets.AZURE_KEY_VAULT_URL }} -kvi ${{ secrets.AZURE_KEY_VAULT_CLIENT_ID }} -kvs ${{ secrets.AZURE_KEY_VAULT_CLIENT_SECRET }} -kvc ${{ secrets.AZURE_KEY_VAULT_CERTIFICATE }} -tr ${{ secrets.TIMESTAMP_RFC3161 }}

    - name: Verify signatures
      run: .\NuGetKeyVaultSignTool verify packages\*.nupkg

    - name: Push to MyGet
      run: dotnet nuget push packages\*.nupkg -s https://www.myget.org/F/efcore-window-functions/api/v3/index.json -k ${{ secrets.MYGET_PUSH_KEY }}

    - name: Push to NuGet
      if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master' }}
      run: dotnet nuget push packages\*.nupkg -s https://api.nuget.org/v3/index.json -k ${{ secrets.NUGET_PUSH_KEY }}

